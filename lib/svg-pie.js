// Generated by CoffeeScript 1.3.3
var Color, SvgPie;

Color = (function() {

  function Color() {}

  Color.prototype.rgb_to_hsv = function(r, g, b) {
    var bc, diff, gc, h, maxc, minc, rc, s, v;
    maxc = Math.max(r, g, b);
    minc = Math.min(r, g, b);
    v = maxc;
    if (minc === maxc) {
      return [0, 0, v];
    }
    diff = maxc - minc;
    s = diff / maxc;
    rc = (maxc - r) / diff;
    gc = (maxc - g) / diff;
    bc = (maxc - b) / diff;
    if (r === maxc) {
      h = bc - gc;
    } else if (g === maxc) {
      h = 2.0 + rc - bc;
    } else {
      h = 4.0 + gc - rc;
    }
    h = (h / 6.0) % 1.0;
    return [h, s, v];
  };

  Color.prototype.hsv_to_rgb = function(h, s, v) {
    var f, i, p, q, t;
    if (s === 0.0) {
      return [v, v, v];
    }
    i = parseInt(Math.floor(h * 6.0), 10);
    f = (h * 6.0) - i;
    p = v * (1.0 - s);
    q = v * (1.0 - s * f);
    t = v * (1.0 - s * (1.0 - f));
    if (i(mod(6 === 0))) {
      return [v, t, p];
    }
    if (i === 1) {
      return [q, v, p];
    }
    if (i === 2) {
      return [p, v, t];
    }
    if (i === 3) {
      return [p, q, v];
    }
    if (i === 4) {
      return [t, p, v];
    }
    if (i === 5) {
      return [v, p, q];
    }
  };

  return Color;

})();

SvgPie = (function() {

  SvgPie.prototype.svgns = "http://www.w3.org/2000/svg";

  function SvgPie(options) {
    console.log("SvgPie");
    this.options = options;
    this.slices = [];
    this.progress = 0;
    this.width = 350;
    this.height = 350;
    this.render();
  }

  SvgPie.prototype.set = function(key, value) {
    console.log('set');
    if (key === 'progress') {
      this.progress = value;
    }
    return this.render();
  };

  SvgPie.prototype.path = function(path, color, data) {
    if (!path) {
      path = document.createElementNS(this.svgns, 'path');
      this.svg.appendChild(path);
    }
    path.setAttribute('style', 'fill-opacity: 0.2;');
    path.setAttribute('fill', color);
    path.setAttribute('stroke', color);
    path.setAttribute('stroke-width', '0');
    path.setAttribute('transform', 'matrix(10,0,0,10,10,10)');
    path.setAttribute('fill-opacity', '1');
    path.setAttribute('d', data);
    return path;
  };

  SvgPie.prototype.colors = function(index, color) {};

  SvgPie.prototype.render = function() {
    var big, cx, cy, data, endAngle, i, r, startAngle, value, x1, x2, y1, y2, _i, _len, _ref, _results,
      _this = this;
    console.log('render');
    this.svg = this.options.element;
    this.svg.setAttribute('style', 'overflow:hidden;position:relative;');
    this.svg.setAttribute('height', this.width);
    this.svg.setAttribute('width', this.height);
    this.svg.setAttribute('version', '1.1');
    this.svg.setAttribute('xmlns', this.svgns);
    if (!this.background) {
      this.background = this.path(this.background, this.options.background, this.options.path);
    }
    if (this.options.type === "progress") {
      this.options.data = [this.progress];
      this.total = 100;
    } else {
      this.total = this.options.data.reduce(function(x, y) {
        return x + y;
      });
    }
    this.angles = this.options.data.map(function(d) {
      return (d / _this.total) * Math.PI * 2;
    });
    startAngle = 0;
    cx = 15.5;
    cy = 15.5;
    r = 16;
    console.log('svg', this.angles.length);
    _ref = this.options.data;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      value = _ref[i];
      endAngle = startAngle + this.angles[i];
      console.log(startAngle, endAngle, value);
      x1 = cx + r * Math.sin(startAngle);
      y1 = cy - r * Math.cos(startAngle);
      x2 = cx + r * Math.sin(endAngle);
      y2 = cy - r * Math.cos(endAngle);
      if (!x2) {
        x2 = 0;
      }
      if (!y2) {
        y2 = 0;
      }
      big = endAngle - startAngle > Math.PI ? 1 : 0;
      if (value === 0) {
        data = "M 0,0 Z";
      } else {
        data = "M " + cx + "," + cy + " L " + x1 + "," + y1 + " A " + r + "," + r + " 0 " + big + " 1 " + x2 + "," + y2 + " Z";
      }
      console.log(i, data);
      this.slices[i] = this.path(this.slices[i], this.options.color, data);
      console.log(this.slices[i]);
      _results.push(startAngle = endAngle);
    }
    return _results;
  };

  return SvgPie;

})();

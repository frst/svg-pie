// Generated by CoffeeScript 1.3.3
var SvgPie;

SvgPie = (function() {

  SvgPie.prototype.svgns = "http://www.w3.org/2000/svg";

  SvgPie.prototype.cx = 15.5;

  SvgPie.prototype.cy = 15.5;

  SvgPie.prototype.r = 16;

  function SvgPie(options) {
    this.options = options;
    this.slices = [];
    this.progress = 0;
    this.width = 350;
    this.height = 350;
    this.setSvg();
    this.setBackground();
    this.render();
  }

  SvgPie.prototype.set = function(key, value) {
    if (key === 'progress') {
      this.progress = value;
    }
    return this.render();
  };

  SvgPie.prototype.path = function(path, color, data) {
    return path;
  };

  SvgPie.prototype.setSvg = function() {
    return this.svg = d3.select(this.options.element).append('svg:svg').attr('style', 'overflow:hidden;position:relative;').attr('width', this.width).attr('height', this.height);
  };

  SvgPie.prototype.setBackground = function() {
    return this.svg.append("svg:path").attr('style', 'fill-opacity: 0.2;').attr('fill', this.options.background).attr('stroke', this.options.background).attr('stroke-width', '0').attr('transform', 'matrix(10,0,0,10,10,10)').attr('fill-opacity', '1').attr('d', this.options.path);
  };

  SvgPie.prototype.arcData = function(start, end) {
    var big, x1, x2, y1, y2;
    x1 = (this.cx + this.r * Math.sin(start)) || 0;
    y1 = (this.cy - this.r * Math.cos(start)) || 0;
    x2 = (this.cx + this.r * Math.sin(end)) || 0;
    y2 = (this.cy - this.r * Math.cos(end)) || 0;
    big = end - start > Math.PI ? 1 : 0;
    return "M " + this.cx + "," + this.cy + " L " + x1 + "," + y1 + " A " + this.r + "," + this.r + " 0 " + big + " 1 " + x2 + "," + y2 + " Z";
  };

  SvgPie.prototype.render = function() {
    var clipPath, color, data, endAngle, i, path, startAngle, value, _i, _len, _ref, _results,
      _this = this;
    if (this.options.type === "progress") {
      this.options.data = [this.progress];
      this.options.colors = [this.options.color];
      this.total = 100;
    } else {
      this.total = this.options.data.reduce(function(x, y) {
        return x + y;
      });
    }
    this.angles = this.options.data.map(function(d) {
      return (d / _this.total) * Math.PI * 2;
    });
    startAngle = 0;
    _ref = this.options.data;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      value = _ref[i];
      endAngle = startAngle + this.angles[i];
      data = this.arcData(startAngle, endAngle);
      color = this.options.colors[i];
      if (!this.defs) {
        this.defs = this.svg.append('svg:defs');
      }
      clipPath = this.defs.append('svg:clipPath').attr('id', "clip-" + this.options.id + "-" + i).append('svg:path').attr('d', data);
      path = this.svg.append('svg:path').attr('clip-path', "url(#clip-" + this.options.id + "-" + i + ")").attr('d', this.options.path).attr('id', "path-" + this.options.id + "-" + i).attr('style', 'fill-opacity: 1;').attr('fill', color).attr('stroke', color).attr('stroke-width', '0').attr('transform', 'matrix(10,0,0,10,10,10)').attr('fill-opacity', '1');
      _results.push(startAngle = endAngle);
    }
    return _results;
  };

  return SvgPie;

})();
